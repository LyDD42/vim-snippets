priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet struct "struct .. (struct)"
struct ${1:`!p snip.rv = snip.basename or "name"`} {
	${1/(\w+).*/$1/} (${2:arguments});
	~${1/(\w+).*/$1/} ();
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {


${VISUAL}${0}


}${1/.+/ \/\/ namespace /m}$1${1/.+/  /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .hpp generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_HPP','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
public:
	$1();
	virtual ~$1();

private:
	${3}
};

#endif /* $2 */
endsnippet

snippet utf "Boost Test UTF"
#define BOOST_TEST_MODULE ${1}
#define BOOST_TEST_DYN_LINK
#include <boost/test/unit_test.hpp>

namespace utf = boost::unit_test;

BOOST_AUTO_TEST_SUITE(${1:test_`!p
if not snip.c:
	filepath = re.sub(r'.*test[\w_]*\/', '', path)
	suite    = filepath.split('/')[0]
	snip.rv  = suite.lower()
else:
	snip.rv = snip.c`})

BOOST_AUTO_TEST_SUITE(${2:`!p
if not snip.c:
	snip.rv = fn.split('.')[0]
else:
	snip.rv = snip.c`})

BOOST_AUTO_TEST_CASE(${3:/* test case */})
{
	BOOST_TEST(${4:/* assertion */});
}

BOOST_AUTO_TEST_SUITE_END() // test suite $2

BOOST_AUTO_TEST_SUITE_END() // test suite $1
endsnippet

# vim:ft=snippets:
